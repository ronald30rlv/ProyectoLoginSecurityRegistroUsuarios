package com.example.demo.Entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.persistence.JoinColumn;
import java.util.Collection;
import java.util.List;

@Entity
@Table(name="usuarios",uniqueConstraints = @UniqueConstraint(columnNames = "email")) //Estamos indicando que el campo de la columna email es unico
public class Usuario {
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idUsuario;
    private String nombre;
    private String apePaterno;
    private String apeMaterno;
    private String celular;
    private String email;
    private String password;
    //Recuerda que el Usuario debe tener un Rol, recuerda tambien que mucho usuarios pueden tener muchos roles
    @ManyToMany(fetch = FetchType.EAGER,cascade = CascadeType.ALL)
    @JoinTable(name="usuarios_roles",joinColumns = @JoinColumn(name="usuario_id",referencedColumnName = "idUsuario"),
                inverseJoinColumns = @JoinColumn(name="role_id",referencedColumnName = "idRol"))
    private Collection<Rol> roles;
}
